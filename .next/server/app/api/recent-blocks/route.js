"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/recent-blocks/route";
exports.ids = ["app/api/recent-blocks/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frecent-blocks%2Froute&page=%2Fapi%2Frecent-blocks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frecent-blocks%2Froute.ts&appDir=D%3A%5Csolana-staking-dashboard%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Csolana-staking-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frecent-blocks%2Froute&page=%2Fapi%2Frecent-blocks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frecent-blocks%2Froute.ts&appDir=D%3A%5Csolana-staking-dashboard%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Csolana-staking-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_solana_staking_dashboard_src_app_api_recent_blocks_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/recent-blocks/route.ts */ \"(rsc)/./src/app/api/recent-blocks/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/recent-blocks/route\",\n        pathname: \"/api/recent-blocks\",\n        filename: \"route\",\n        bundlePath: \"app/api/recent-blocks/route\"\n    },\n    resolvedPagePath: \"D:\\\\solana-staking-dashboard\\\\src\\\\app\\\\api\\\\recent-blocks\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_solana_staking_dashboard_src_app_api_recent_blocks_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/recent-blocks/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZyZWNlbnQtYmxvY2tzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZyZWNlbnQtYmxvY2tzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcmVjZW50LWJsb2NrcyUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDc29sYW5hLXN0YWtpbmctZGFzaGJvYXJkJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1EJTNBJTVDc29sYW5hLXN0YWtpbmctZGFzaGJvYXJkJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNvQjtBQUNqRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1zdGFraW5nLWRhc2hib2FyZC8/MmExMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJEOlxcXFxzb2xhbmEtc3Rha2luZy1kYXNoYm9hcmRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccmVjZW50LWJsb2Nrc1xcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcmVjZW50LWJsb2Nrcy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3JlY2VudC1ibG9ja3NcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3JlY2VudC1ibG9ja3Mvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJEOlxcXFxzb2xhbmEtc3Rha2luZy1kYXNoYm9hcmRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccmVjZW50LWJsb2Nrc1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvcmVjZW50LWJsb2Nrcy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frecent-blocks%2Froute&page=%2Fapi%2Frecent-blocks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frecent-blocks%2Froute.ts&appDir=D%3A%5Csolana-staking-dashboard%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Csolana-staking-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/recent-blocks/route.ts":
/*!********************************************!*\
  !*** ./src/app/api/recent-blocks/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_api_solana__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/api/solana */ \"(rsc)/./src/lib/api/solana.ts\");\n\n\nconst dynamic = \"force-dynamic\";\nasync function GET(request) {\n    try {\n        const searchParams = request.nextUrl.searchParams;\n        const limit = parseInt(searchParams.get(\"limit\") || \"50\", 10);\n        const offset = parseInt(searchParams.get(\"offset\") || \"0\", 10);\n        const response = await (0,_lib_api_solana__WEBPACK_IMPORTED_MODULE_1__.getRecentBlocks)(limit, offset);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n    } catch (error) {\n        console.error(\"Error in recent blocks route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Failed to fetch recent blocks\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9yZWNlbnQtYmxvY2tzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7QUFDTDtBQUU1QyxNQUFNRSxVQUFVLGdCQUFnQjtBQUVoQyxlQUFlQyxJQUFJQyxPQUFvQjtJQUM1QyxJQUFJO1FBQ0YsTUFBTUMsZUFBZUQsUUFBUUUsT0FBTyxDQUFDRCxZQUFZO1FBQ2pELE1BQU1FLFFBQVFDLFNBQVNILGFBQWFJLEdBQUcsQ0FBQyxZQUFZLE1BQU07UUFDMUQsTUFBTUMsU0FBU0YsU0FBU0gsYUFBYUksR0FBRyxDQUFDLGFBQWEsS0FBSztRQUUzRCxNQUFNRSxXQUFXLE1BQU1WLGdFQUFlQSxDQUFDTSxPQUFPRztRQUM5QyxPQUFPVixxREFBWUEsQ0FBQ1ksSUFBSSxDQUFDRDtJQUMzQixFQUFFLE9BQU9FLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLGlDQUFpQ0E7UUFDL0MsT0FBT2IscURBQVlBLENBQUNZLElBQUksQ0FDdEI7WUFBRUMsT0FBT0EsaUJBQWlCRSxRQUFRRixNQUFNRyxPQUFPLEdBQUc7UUFBZ0MsR0FDbEY7WUFBRUMsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhbmEtc3Rha2luZy1kYXNoYm9hcmQvLi9zcmMvYXBwL2FwaS9yZWNlbnQtYmxvY2tzL3JvdXRlLnRzPzY1ZTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IGdldFJlY2VudEJsb2NrcyB9IGZyb20gJ0AvbGliL2FwaS9zb2xhbmEnO1xuXG5leHBvcnQgY29uc3QgZHluYW1pYyA9ICdmb3JjZS1keW5hbWljJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IHJlcXVlc3QubmV4dFVybC5zZWFyY2hQYXJhbXM7XG4gICAgY29uc3QgbGltaXQgPSBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdsaW1pdCcpIHx8ICc1MCcsIDEwKTtcbiAgICBjb25zdCBvZmZzZXQgPSBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdvZmZzZXQnKSB8fCAnMCcsIDEwKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0UmVjZW50QmxvY2tzKGxpbWl0LCBvZmZzZXQpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXNwb25zZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gcmVjZW50IGJsb2NrcyByb3V0ZTonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIGZldGNoIHJlY2VudCBibG9ja3MnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59ICJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJnZXRSZWNlbnRCbG9ja3MiLCJkeW5hbWljIiwiR0VUIiwicmVxdWVzdCIsInNlYXJjaFBhcmFtcyIsIm5leHRVcmwiLCJsaW1pdCIsInBhcnNlSW50IiwiZ2V0Iiwib2Zmc2V0IiwicmVzcG9uc2UiLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwiRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/recent-blocks/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/api/solana.ts":
/*!*******************************!*\
  !*** ./src/lib/api/solana.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SOLANA_BEACH_API: () => (/* binding */ SOLANA_BEACH_API),\n/* harmony export */   getGeneralInfo: () => (/* binding */ getGeneralInfo),\n/* harmony export */   getMarketData: () => (/* binding */ getMarketData),\n/* harmony export */   getNetworkStatus: () => (/* binding */ getNetworkStatus),\n/* harmony export */   getRecentBlocks: () => (/* binding */ getRecentBlocks),\n/* harmony export */   getRecentTransactions: () => (/* binding */ getRecentTransactions),\n/* harmony export */   getSupplyBreakdown: () => (/* binding */ getSupplyBreakdown),\n/* harmony export */   getTPS: () => (/* binding */ getTPS),\n/* harmony export */   getTopValidators: () => (/* binding */ getTopValidators)\n/* harmony export */ });\n/* harmony import */ var _redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../redis */ \"(rsc)/./src/lib/redis.ts\");\n\n// Base URL for Solana Beach API\nconst SOLANA_BEACH_API = \"https://public-api.solanabeach.io\" || 0;\nconst API_KEY = \"b3f80ab3-e78f-4a48-be9e-0a86ddf031ae\";\n// Rate limiting configuration\nconst RATE_LIMIT_REQUESTS = parseInt(process.env.RATE_LIMIT_REQUESTS || \"50\", 10);\nconst RATE_LIMIT_WINDOW = parseInt(process.env.RATE_LIMIT_WINDOW || \"60\", 10); // 60 seconds\nconst MAX_RETRIES = 3;\nconst RETRY_DELAY = 1000; // 1 second\n// Common headers for API requests\nconst headers = {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\",\n    ...API_KEY ? {\n        \"Authorization\": `Bearer ${API_KEY}`\n    } : {}\n};\n// Error handling\nclass SolanaApiError extends Error {\n    constructor(code, message, details){\n        super(message);\n        this.code = code;\n        this.details = details;\n        this.name = \"SolanaApiError\";\n    }\n}\n// Rate limiting implementation\nconst requestCounts = new Map();\nfunction checkRateLimit(endpoint) {\n    const now = Date.now();\n    const key = `${endpoint}:${Math.floor(now / 1000 / RATE_LIMIT_WINDOW)}`;\n    const current = requestCounts.get(key) || {\n        count: 0,\n        resetTime: now + RATE_LIMIT_WINDOW * 1000\n    };\n    if (now > current.resetTime) {\n        requestCounts.set(key, {\n            count: 1,\n            resetTime: now + RATE_LIMIT_WINDOW * 1000\n        });\n        return true;\n    }\n    if (current.count >= RATE_LIMIT_REQUESTS) {\n        return false;\n    }\n    current.count++;\n    requestCounts.set(key, current);\n    return true;\n}\n// Generic fetch function with caching, rate limiting, and error handling\nasync function fetchWithCache(endpoint, cacheKey, ttl = _redis__WEBPACK_IMPORTED_MODULE_0__.CACHE_TTL.MEDIUM) {\n    let retries = 0;\n    while(retries < MAX_RETRIES){\n        try {\n            // Check rate limit\n            if (!checkRateLimit(endpoint)) {\n                throw new SolanaApiError(\"RATE_LIMIT_EXCEEDED\", \"Rate limit exceeded. Please try again later.\");\n            }\n            // Check cache first\n            const cachedData = await (0,_redis__WEBPACK_IMPORTED_MODULE_0__.getCachedData)(cacheKey);\n            if (cachedData) {\n                return cachedData;\n            }\n            // Use proxy for all external API calls\n            const response = await fetch(`/api/proxy?endpoint=${endpoint}`, {\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                cache: \"no-store\"\n            });\n            if (response.status === 429) {\n                // Rate limit hit, wait and retry\n                await new Promise((resolve)=>setTimeout(resolve, RETRY_DELAY * Math.pow(2, retries)));\n                retries++;\n                continue;\n            }\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new SolanaApiError(\"API_ERROR\", `API error: ${response.status} ${response.statusText}`, errorData);\n            }\n            const data = await response.json();\n            const apiResponse = {\n                data,\n                timestamp: Date.now(),\n                success: true\n            };\n            // Cache the response\n            await (0,_redis__WEBPACK_IMPORTED_MODULE_0__.setCachedData)(cacheKey, apiResponse, ttl);\n            return apiResponse;\n        } catch (error) {\n            if (retries < MAX_RETRIES - 1) {\n                await new Promise((resolve)=>setTimeout(resolve, RETRY_DELAY * Math.pow(2, retries)));\n                retries++;\n                continue;\n            }\n            throw error;\n        }\n    }\n    throw new SolanaApiError(\"MAX_RETRIES_EXCEEDED\", \"Maximum number of retries exceeded\");\n}\n// Network Status\nasync function getNetworkStatus() {\n    try {\n        // Direct fetch without caching for network status to ensure fresh data\n        const response = await fetch(`${SOLANA_BEACH_API}/v1/network-status`, {\n            headers,\n            cache: \"no-store\"\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new SolanaApiError(\"API_ERROR\", `API error: ${response.status} ${response.statusText}`, errorData);\n        }\n        const data = await response.json();\n        const apiResponse = {\n            data,\n            timestamp: Date.now(),\n            success: true\n        };\n        return apiResponse;\n    } catch (error) {\n        if (error instanceof SolanaApiError) {\n            throw error;\n        }\n        throw new SolanaApiError(\"FETCH_ERROR\", error instanceof Error ? error.message : \"Unknown error occurred\", error);\n    }\n}\n// Supply Breakdown\nasync function getSupplyBreakdown() {\n    try {\n        const response = await fetchWithCache(\"/v2/supply-breakdown\", \"solana:supply-breakdown\", _redis__WEBPACK_IMPORTED_MODULE_0__.CACHE_TTL.MEDIUM);\n        // Log the raw response for debugging\n        console.log(\"Raw supply breakdown response:\", response);\n        // Transform the data to match the expected structure\n        const transformedData = {\n            supply: {\n                circulating: Number(response.data.supply.circulating) || 0,\n                nonCirculating: Number(response.data.supply.nonCirculating) || 0,\n                total: Number(response.data.supply.total) || 0\n            },\n            stake: {\n                effective: Number(response.data.stake.effective) || 0,\n                activating: Number(response.data.stake.activating) || 0,\n                deactivating: Number(response.data.stake.deactivating) || 0\n            }\n        };\n        // Validate the transformed data\n        if (!isValidSupplyData(transformedData)) {\n            throw new SolanaApiError(\"INVALID_DATA\", \"Invalid supply data structure received from API\", transformedData);\n        }\n        return {\n            data: transformedData,\n            timestamp: Date.now(),\n            success: true\n        };\n    } catch (error) {\n        if (error instanceof SolanaApiError) {\n            throw error;\n        }\n        throw new SolanaApiError(\"FETCH_ERROR\", error instanceof Error ? error.message : \"Unknown error occurred\", error);\n    }\n}\n// Helper function to validate supply data\nfunction isValidSupplyData(data) {\n    return typeof data === \"object\" && data !== null && typeof data.supply === \"object\" && typeof data.supply.circulating === \"number\" && typeof data.supply.nonCirculating === \"number\" && typeof data.supply.total === \"number\" && typeof data.stake === \"object\" && typeof data.stake.effective === \"number\" && typeof data.stake.activating === \"number\" && typeof data.stake.deactivating === \"number\";\n}\n// TPS\nasync function getTPS() {\n    try {\n        // Direct fetch without caching for TPS to ensure real-time data\n        const response = await fetch(\"/api/tps\", {\n            cache: \"no-store\"\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new SolanaApiError(\"API_ERROR\", `API error: ${response.status} ${response.statusText}`, errorData);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        if (error instanceof SolanaApiError) {\n            throw error;\n        }\n        throw new SolanaApiError(\"FETCH_ERROR\", error instanceof Error ? error.message : \"Unknown error occurred\", error);\n    }\n}\n// Market Data\nasync function getMarketData() {\n    try {\n        const response = await fetch(\"/api/market-data\", {\n            cache: \"no-store\"\n        });\n        if (!response.ok) {\n            throw new SolanaApiError(\"API_ERROR\", `API error: ${response.status} ${response.statusText}`);\n        }\n        const data = await response.json();\n        if (!data || !data.data) {\n            throw new SolanaApiError(\"INVALID_DATA\", \"Invalid market data response\");\n        }\n        return {\n            data: data.data,\n            timestamp: data.timestamp || Date.now(),\n            success: true\n        };\n    } catch (error) {\n        if (error instanceof SolanaApiError) {\n            throw error;\n        }\n        throw new SolanaApiError(\"FETCH_ERROR\", error instanceof Error ? error.message : \"Unknown error occurred\", error);\n    }\n}\n// Recent Blocks\nasync function getRecentBlocks(limit = 50, offset = 0) {\n    try {\n        if (!API_KEY) {\n            throw new SolanaApiError(\"API_KEY_MISSING\", \"Solana Beach API key is required\");\n        }\n        const response = await fetch(`${SOLANA_BEACH_API}/v2/recent-blocks?limit=${limit}&offset=${offset}`, {\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${API_KEY}`\n            },\n            cache: \"no-store\"\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new SolanaApiError(\"API_ERROR\", `API error: ${response.status} ${response.statusText}`, errorData);\n        }\n        const data = await response.json();\n        // Validate the response data\n        if (!data || !Array.isArray(data.blocks)) {\n            throw new SolanaApiError(\"INVALID_DATA\", \"Invalid response format from API\", data);\n        }\n        return {\n            data: {\n                blocks: data.blocks,\n                pagination: {\n                    total: data.pagination?.total || data.blocks.length,\n                    offset: data.pagination?.offset || offset,\n                    limit: data.pagination?.limit || limit\n                }\n            },\n            timestamp: Date.now(),\n            success: true\n        };\n    } catch (error) {\n        if (error instanceof SolanaApiError) {\n            throw error;\n        }\n        throw new SolanaApiError(\"FETCH_ERROR\", error instanceof Error ? error.message : \"Unknown error occurred\", error);\n    }\n}\n// Recent Transactions\nasync function getRecentTransactions(limit = 50, offset = 0) {\n    try {\n        const API_KEY = \"b3f80ab3-e78f-4a48-be9e-0a86ddf031ae\";\n        if (!API_KEY) {\n            throw new SolanaApiError(\"API_KEY_MISSING\", \"Solana Beach API key is required\");\n        }\n        const response = await fetch(`${SOLANA_BEACH_API}/v1/latest-transactions?limit=${limit}&offset=${offset}`, {\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${API_KEY}`\n            },\n            cache: \"no-store\"\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new SolanaApiError(\"API_ERROR\", `API error: ${response.status} ${response.statusText}`, errorData);\n        }\n        const data = await response.json();\n        // Validate the response data\n        if (!data || !Array.isArray(data)) {\n            throw new SolanaApiError(\"INVALID_DATA\", \"Invalid response format from API\", data);\n        }\n        return {\n            data: {\n                transactions: data,\n                pagination: {\n                    total: data.length,\n                    offset: offset,\n                    limit: limit\n                }\n            },\n            timestamp: Date.now(),\n            success: true\n        };\n    } catch (error) {\n        if (error instanceof SolanaApiError) {\n            throw error;\n        }\n        throw new SolanaApiError(\"FETCH_ERROR\", error instanceof Error ? error.message : \"Unknown error occurred\", error);\n    }\n}\n// Get Top Validators\nasync function getTopValidators(limit = 100, offset = 0) {\n    try {\n        if (!API_KEY) {\n            throw new SolanaApiError(\"API_KEY_MISSING\", \"Solana Beach API key is required\");\n        }\n        const response = await fetch(`/api/proxy?endpoint=/v1/validators/top&limit=${limit}&offset=${offset}`, {\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            cache: \"no-store\"\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new SolanaApiError(\"API_ERROR\", `API error: ${response.status} ${response.statusText}`, errorData);\n        }\n        const data = await response.json();\n        // Validate the response data\n        if (!data || !Array.isArray(data)) {\n            throw new SolanaApiError(\"INVALID_DATA\", \"Invalid response format from API\", data);\n        }\n        return {\n            data,\n            timestamp: Date.now(),\n            success: true\n        };\n    } catch (error) {\n        if (error instanceof SolanaApiError) {\n            throw error;\n        }\n        throw new SolanaApiError(\"FETCH_ERROR\", \"Failed to fetch validators\", error);\n    }\n}\n// Get General Info\nasync function getGeneralInfo() {\n    try {\n        if (!API_KEY) {\n            throw new SolanaApiError(\"API_KEY_MISSING\", \"Solana Beach API key is required\");\n        }\n        const response = await fetch(\"/api/proxy?endpoint=/v1/general-info\", {\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            cache: \"no-store\"\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new SolanaApiError(\"API_ERROR\", `API error: ${response.status} ${response.statusText}`, errorData);\n        }\n        const data = await response.json();\n        // Validate the response data\n        if (!data) {\n            throw new SolanaApiError(\"INVALID_DATA\", \"Invalid response format from API\", data);\n        }\n        return {\n            data,\n            timestamp: Date.now(),\n            success: true\n        };\n    } catch (error) {\n        if (error instanceof SolanaApiError) {\n            throw error;\n        }\n        throw new SolanaApiError(\"FETCH_ERROR\", error instanceof Error ? error.message : \"Unknown error occurred\", error);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/api/solana.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/redis.ts":
/*!**************************!*\
  !*** ./src/lib/redis.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CACHE_TTL: () => (/* binding */ CACHE_TTL),\n/* harmony export */   clearCache: () => (/* binding */ clearCache),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   deleteCachedData: () => (/* binding */ deleteCachedData),\n/* harmony export */   getCachedData: () => (/* binding */ getCachedData),\n/* harmony export */   setCachedData: () => (/* binding */ setCachedData)\n/* harmony export */ });\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.mjs\");\n\n// In-memory cache fallback\nconst memoryCache = new Map();\n// Redis connection\nlet redis = null;\n// Initialize Redis connection\nconst initializeRedis = async ()=>{\n    if (!redis) {\n        try {\n            // Use Redis URL and password from environment variables\n            const redisUrl = process.env.REDIS_URL;\n            const redisPassword = process.env.REDIS_PASSWORD;\n            if (redisUrl && redisPassword) {\n                console.info(\"Connecting to Redis\");\n                redis = new _upstash_redis__WEBPACK_IMPORTED_MODULE_0__.Redis({\n                    url: redisUrl,\n                    password: redisPassword\n                });\n                // Test the connection\n                await redis.ping();\n                console.info(\"Successfully connected to Redis\");\n            } else {\n                console.info(\"Redis credentials not found, using in-memory cache\");\n                redis = null;\n            }\n        } catch (error) {\n            console.warn(\"Redis connection failed, falling back to in-memory cache:\", error);\n            redis = null;\n        }\n    }\n    return redis;\n};\n// Cache TTL constants (in seconds)\nconst CACHE_TTL = {\n    SHORT: parseInt(process.env.CACHE_TTL_SHORT || \"60\", 10),\n    MEDIUM: parseInt(process.env.CACHE_TTL_MEDIUM || \"300\", 10),\n    LONG: parseInt(process.env.CACHE_TTL_LONG || \"3600\", 10)\n};\n// Get data from cache\nasync function getCachedData(key) {\n    try {\n        const redisInstance = await initializeRedis();\n        if (redisInstance) {\n            const data = await redisInstance.get(key);\n            return data || null;\n        }\n        // Fallback to in-memory cache\n        const cached = memoryCache.get(key);\n        if (cached && cached.expiry > Date.now()) {\n            return cached.data;\n        }\n        memoryCache.delete(key);\n        return null;\n    } catch (error) {\n        console.error(\"Cache get error:\", error);\n        return null;\n    }\n}\n// Set data in cache\nasync function setCachedData(key, data, ttl) {\n    try {\n        const redisInstance = await initializeRedis();\n        if (redisInstance) {\n            await redisInstance.set(key, data, {\n                ex: ttl\n            });\n            return;\n        }\n        // Fallback to in-memory cache\n        const expiry = Date.now() + ttl * 1000;\n        memoryCache.set(key, {\n            data,\n            expiry\n        });\n    } catch (error) {\n        console.error(\"Cache set error:\", error);\n    }\n}\n// Delete data from cache\nasync function deleteCachedData(key) {\n    try {\n        const redisInstance = await initializeRedis();\n        if (redisInstance) {\n            await redisInstance.del(key);\n            return;\n        }\n        memoryCache.delete(key);\n    } catch (error) {\n        console.error(\"Cache delete error:\", error);\n    }\n}\n// Clear all cache\nasync function clearCache() {\n    try {\n        const redisInstance = await initializeRedis();\n        if (redisInstance) {\n            await redisInstance.flushall();\n            return;\n        }\n        memoryCache.clear();\n    } catch (error) {\n        console.error(\"Cache clear error:\", error);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (redis);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU1kLGdCQUFnQixNQUFNeEI7UUFDNUIsSUFBSXdCLGVBQWU7WUFDakIsTUFBTUEsY0FBY2UsUUFBUTtZQUM1QjtRQUNGO1FBQ0ExQyxZQUFZMkMsS0FBSztJQUNuQixFQUFFLE9BQU81QixPQUFPO1FBQ2RMLFFBQVFLLEtBQUssQ0FBQyxzQkFBc0JBO0lBQ3RDO0FBQ0Y7QUFFQSxpRUFBZWIsS0FBS0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1zdGFraW5nLWRhc2hib2FyZC8uL3NyYy9saWIvcmVkaXMudHM/OTI1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWRpcyB9IGZyb20gJ0B1cHN0YXNoL3JlZGlzJztcclxuXHJcbi8vIEluLW1lbW9yeSBjYWNoZSBmYWxsYmFja1xyXG5jb25zdCBtZW1vcnlDYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCB7IGRhdGE6IGFueTsgZXhwaXJ5OiBudW1iZXIgfT4oKTtcclxuXHJcbi8vIFJlZGlzIGNvbm5lY3Rpb25cclxubGV0IHJlZGlzOiBSZWRpcyB8IG51bGwgPSBudWxsO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBSZWRpcyBjb25uZWN0aW9uXHJcbmNvbnN0IGluaXRpYWxpemVSZWRpcyA9IGFzeW5jICgpID0+IHtcclxuICBpZiAoIXJlZGlzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBVc2UgUmVkaXMgVVJMIGFuZCBwYXNzd29yZCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlc1xyXG4gICAgICBjb25zdCByZWRpc1VybCA9IHByb2Nlc3MuZW52LlJFRElTX1VSTDtcclxuICAgICAgY29uc3QgcmVkaXNQYXNzd29yZCA9IHByb2Nlc3MuZW52LlJFRElTX1BBU1NXT1JEO1xyXG4gICAgICBcclxuICAgICAgaWYgKHJlZGlzVXJsICYmIHJlZGlzUGFzc3dvcmQpIHtcclxuICAgICAgICBjb25zb2xlLmluZm8oJ0Nvbm5lY3RpbmcgdG8gUmVkaXMnKTtcclxuICAgICAgICByZWRpcyA9IG5ldyBSZWRpcyh7XHJcbiAgICAgICAgICB1cmw6IHJlZGlzVXJsLFxyXG4gICAgICAgICAgcGFzc3dvcmQ6IHJlZGlzUGFzc3dvcmQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVGVzdCB0aGUgY29ubmVjdGlvblxyXG4gICAgICAgIGF3YWl0IHJlZGlzLnBpbmcoKTtcclxuICAgICAgICBjb25zb2xlLmluZm8oJ1N1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgdG8gUmVkaXMnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmluZm8oJ1JlZGlzIGNyZWRlbnRpYWxzIG5vdCBmb3VuZCwgdXNpbmcgaW4tbWVtb3J5IGNhY2hlJyk7XHJcbiAgICAgICAgcmVkaXMgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ1JlZGlzIGNvbm5lY3Rpb24gZmFpbGVkLCBmYWxsaW5nIGJhY2sgdG8gaW4tbWVtb3J5IGNhY2hlOicsIGVycm9yKTtcclxuICAgICAgcmVkaXMgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcmVkaXM7XHJcbn07XHJcblxyXG4vLyBDYWNoZSBUVEwgY29uc3RhbnRzIChpbiBzZWNvbmRzKVxyXG5leHBvcnQgY29uc3QgQ0FDSEVfVFRMID0ge1xyXG4gIFNIT1JUOiBwYXJzZUludChwcm9jZXNzLmVudi5DQUNIRV9UVExfU0hPUlQgfHwgJzYwJywgMTApLCAgICAvLyAxIG1pbnV0ZVxyXG4gIE1FRElVTTogcGFyc2VJbnQocHJvY2Vzcy5lbnYuQ0FDSEVfVFRMX01FRElVTSB8fCAnMzAwJywgMTApLCAgIC8vIDUgbWludXRlc1xyXG4gIExPTkc6IHBhcnNlSW50KHByb2Nlc3MuZW52LkNBQ0hFX1RUTF9MT05HIHx8ICczNjAwJywgMTApLCAgICAvLyAxIGhvdXJcclxufTtcclxuXHJcbi8vIEdldCBkYXRhIGZyb20gY2FjaGVcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhY2hlZERhdGE8VD4oa2V5OiBzdHJpbmcpOiBQcm9taXNlPFQgfCBudWxsPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlZGlzSW5zdGFuY2UgPSBhd2FpdCBpbml0aWFsaXplUmVkaXMoKTtcclxuICAgIGlmIChyZWRpc0luc3RhbmNlKSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZWRpc0luc3RhbmNlLmdldDxUPihrZXkpO1xyXG4gICAgICByZXR1cm4gZGF0YSB8fCBudWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBGYWxsYmFjayB0byBpbi1tZW1vcnkgY2FjaGVcclxuICAgIGNvbnN0IGNhY2hlZCA9IG1lbW9yeUNhY2hlLmdldChrZXkpO1xyXG4gICAgaWYgKGNhY2hlZCAmJiBjYWNoZWQuZXhwaXJ5ID4gRGF0ZS5ub3coKSkge1xyXG4gICAgICByZXR1cm4gY2FjaGVkLmRhdGE7XHJcbiAgICB9XHJcbiAgICBtZW1vcnlDYWNoZS5kZWxldGUoa2V5KTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdDYWNoZSBnZXQgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBTZXQgZGF0YSBpbiBjYWNoZVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0Q2FjaGVkRGF0YTxUPihrZXk6IHN0cmluZywgZGF0YTogVCwgdHRsOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVkaXNJbnN0YW5jZSA9IGF3YWl0IGluaXRpYWxpemVSZWRpcygpO1xyXG4gICAgaWYgKHJlZGlzSW5zdGFuY2UpIHtcclxuICAgICAgYXdhaXQgcmVkaXNJbnN0YW5jZS5zZXQoa2V5LCBkYXRhLCB7IGV4OiB0dGwgfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gRmFsbGJhY2sgdG8gaW4tbWVtb3J5IGNhY2hlXHJcbiAgICBjb25zdCBleHBpcnkgPSBEYXRlLm5vdygpICsgKHR0bCAqIDEwMDApO1xyXG4gICAgbWVtb3J5Q2FjaGUuc2V0KGtleSwgeyBkYXRhLCBleHBpcnkgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0NhY2hlIHNldCBlcnJvcjonLCBlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBEZWxldGUgZGF0YSBmcm9tIGNhY2hlXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVDYWNoZWREYXRhKGtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlZGlzSW5zdGFuY2UgPSBhd2FpdCBpbml0aWFsaXplUmVkaXMoKTtcclxuICAgIGlmIChyZWRpc0luc3RhbmNlKSB7XHJcbiAgICAgIGF3YWl0IHJlZGlzSW5zdGFuY2UuZGVsKGtleSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG1lbW9yeUNhY2hlLmRlbGV0ZShrZXkpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdDYWNoZSBkZWxldGUgZXJyb3I6JywgZXJyb3IpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQ2xlYXIgYWxsIGNhY2hlXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhckNhY2hlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZWRpc0luc3RhbmNlID0gYXdhaXQgaW5pdGlhbGl6ZVJlZGlzKCk7XHJcbiAgICBpZiAocmVkaXNJbnN0YW5jZSkge1xyXG4gICAgICBhd2FpdCByZWRpc0luc3RhbmNlLmZsdXNoYWxsKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG1lbW9yeUNhY2hlLmNsZWFyKCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0NhY2hlIGNsZWFyIGVycm9yOicsIGVycm9yKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJlZGlzOyAiXSwibmFtZXMiOlsiUmVkaXMiLCJtZW1vcnlDYWNoZSIsIk1hcCIsInJlZGlzIiwiaW5pdGlhbGl6ZVJlZGlzIiwicmVkaXNVcmwiLCJwcm9jZXNzIiwiZW52IiwiUkVESVNfVVJMIiwicmVkaXNQYXNzd29yZCIsIlJFRElTX1BBU1NXT1JEIiwiY29uc29sZSIsImluZm8iLCJ1cmwiLCJwYXNzd29yZCIsInBpbmciLCJlcnJvciIsIndhcm4iLCJDQUNIRV9UVEwiLCJTSE9SVCIsInBhcnNlSW50IiwiQ0FDSEVfVFRMX1NIT1JUIiwiTUVESVVNIiwiQ0FDSEVfVFRMX01FRElVTSIsIkxPTkciLCJDQUNIRV9UVExfTE9ORyIsImdldENhY2hlZERhdGEiLCJrZXkiLCJyZWRpc0luc3RhbmNlIiwiZGF0YSIsImdldCIsImNhY2hlZCIsImV4cGlyeSIsIkRhdGUiLCJub3ciLCJkZWxldGUiLCJzZXRDYWNoZWREYXRhIiwidHRsIiwic2V0IiwiZXgiLCJkZWxldGVDYWNoZWREYXRhIiwiZGVsIiwiY2xlYXJDYWNoZSIsImZsdXNoYWxsIiwiY2xlYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/redis.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@upstash","vendor-chunks/crypto-js"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frecent-blocks%2Froute&page=%2Fapi%2Frecent-blocks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frecent-blocks%2Froute.ts&appDir=D%3A%5Csolana-staking-dashboard%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Csolana-staking-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();